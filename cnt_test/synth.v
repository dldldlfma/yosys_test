/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* top =  1  *)
(* src = "cnt.v:1" *)
module cnt(clk, rstn, out);
  (* src = "cnt.v:7" *)
  wire [7:0] _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  (* src = "cnt.v:2" *)
  input clk;
  (* src = "cnt.v:4" *)
  output [7:0] out;
  reg [7:0] out;
  (* src = "cnt.v:3" *)
  input rstn;
  NOT _36_ (
    .A(out[6]),
    .Y(_01_)
  );
  NOT _37_ (
    .A(out[4]),
    .Y(_02_)
  );
  NOT _38_ (
    .A(out[1]),
    .Y(_03_)
  );
  NOT _39_ (
    .A(out[2]),
    .Y(_04_)
  );
  NOT _40_ (
    .A(out[3]),
    .Y(_05_)
  );
  NOT _41_ (
    .A(out[0]),
    .Y(_06_)
  );
  NAND _42_ (
    .A(out[5]),
    .B(out[4]),
    .Y(_07_)
  );
  NOR _43_ (
    .A(_05_),
    .B(_07_),
    .Y(_08_)
  );
  NOR _44_ (
    .A(out[1]),
    .B(out[2]),
    .Y(_09_)
  );
  NAND _45_ (
    .A(out[7]),
    .B(out[6]),
    .Y(_10_)
  );
  NOR _46_ (
    .A(_09_),
    .B(_10_),
    .Y(_11_)
  );
  NAND _47_ (
    .A(_08_),
    .B(_11_),
    .Y(_12_)
  );
  NOT _48_ (
    .A(_12_),
    .Y(_13_)
  );
  NOR _49_ (
    .A(out[0]),
    .B(_13_),
    .Y(_00_[0])
  );
  NAND _50_ (
    .A(_03_),
    .B(_06_),
    .Y(_14_)
  );
  NOR _51_ (
    .A(_03_),
    .B(_06_),
    .Y(_15_)
  );
  NAND _52_ (
    .A(out[1]),
    .B(out[0]),
    .Y(_16_)
  );
  NAND _53_ (
    .A(_14_),
    .B(_16_),
    .Y(_17_)
  );
  NOR _54_ (
    .A(_13_),
    .B(_17_),
    .Y(_00_[1])
  );
  NAND _55_ (
    .A(_04_),
    .B(_16_),
    .Y(_18_)
  );
  NOR _56_ (
    .A(_04_),
    .B(_16_),
    .Y(_19_)
  );
  NAND _57_ (
    .A(out[2]),
    .B(_15_),
    .Y(_20_)
  );
  NAND _58_ (
    .A(_18_),
    .B(_20_),
    .Y(_21_)
  );
  NOR _59_ (
    .A(_13_),
    .B(_21_),
    .Y(_00_[2])
  );
  NAND _60_ (
    .A(out[3]),
    .B(_19_),
    .Y(_22_)
  );
  NOT _61_ (
    .A(_22_),
    .Y(_23_)
  );
  NAND _62_ (
    .A(_05_),
    .B(_20_),
    .Y(_24_)
  );
  NAND _63_ (
    .A(_12_),
    .B(_24_),
    .Y(_25_)
  );
  NOR _64_ (
    .A(_23_),
    .B(_25_),
    .Y(_00_[3])
  );
  NOR _65_ (
    .A(_02_),
    .B(_22_),
    .Y(_26_)
  );
  NAND _66_ (
    .A(_02_),
    .B(_22_),
    .Y(_27_)
  );
  NAND _67_ (
    .A(_12_),
    .B(_27_),
    .Y(_28_)
  );
  NOR _68_ (
    .A(_26_),
    .B(_28_),
    .Y(_00_[4])
  );
  NOR _69_ (
    .A(out[5]),
    .B(_26_),
    .Y(_29_)
  );
  NAND _70_ (
    .A(_08_),
    .B(_19_),
    .Y(_30_)
  );
  NAND _71_ (
    .A(_12_),
    .B(_30_),
    .Y(_31_)
  );
  NOR _72_ (
    .A(_29_),
    .B(_31_),
    .Y(_00_[5])
  );
  NOR _73_ (
    .A(_01_),
    .B(_30_),
    .Y(_32_)
  );
  NAND _74_ (
    .A(_01_),
    .B(_30_),
    .Y(_33_)
  );
  NAND _75_ (
    .A(_12_),
    .B(_33_),
    .Y(_34_)
  );
  NOR _76_ (
    .A(_32_),
    .B(_34_),
    .Y(_00_[6])
  );
  NOR _77_ (
    .A(out[7]),
    .B(_32_),
    .Y(_35_)
  );
  NOR _78_ (
    .A(_13_),
    .B(_35_),
    .Y(_00_[7])
  );
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[0] <= 0;
    else
      out[0] <= _00_[0];
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[1] <= 0;
    else
      out[1] <= _00_[1];
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[2] <= 0;
    else
      out[2] <= _00_[2];
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[3] <= 0;
    else
      out[3] <= _00_[3];
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[4] <= 0;
    else
      out[4] <= _00_[4];
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[5] <= 0;
    else
      out[5] <= _00_[5];
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[6] <= 0;
    else
      out[6] <= _00_[6];
  (* src = "cnt.v:7" *)
  always @(posedge clk or negedge rstn)
    if (!rstn)
      out[7] <= 0;
    else
      out[7] <= _00_[7];
endmodule
